const Recipe = require('../models/recipeModel');
const path = require('path');
const fs = require('fs'); // <-- Add this line


// @desc    Create a new recipe
// @route   POST /api/recipes
// @access  Public
const createRecipe = async (req, res) => {
  try {
    const { title, category, cookingTime, ingredients, steps } = req.body;

    if (!req.file) {
      return res.status(400).json({ message: 'Recipe image is required.' });
    }

    // The path to the image is generated by multer
    // We replace backslashes with forward slashes for URL compatibility
    const imageUrl = req.file.path; // USE THIS NEW LINE

    const newRecipe = new Recipe({
      title,
      category,
      cookingTime,
      ingredients: Array.isArray(ingredients) ? ingredients : [ingredients], // Ensure ingredients are an array
      steps: Array.isArray(steps) ? steps : [steps], // Ensure steps are an array
      imageUrl
    });

    const savedRecipe = await newRecipe.save();
    res.status(201).json(savedRecipe);
  } catch (error) {
    res.status(500).json({ message: 'Server Error: ' + error.message });
  }
};
// @desc    Update a recipe
// @route   PUT /api/recipes/:id
// @access  Public
const updateRecipe = async (req, res) => {
  try {
    const recipe = await Recipe.findById(req.params.id);

    if (!recipe) {
      return res.status(404).json({ message: 'Recipe not found.' });
    }

    // Update text fields from the request body
    recipe.title = req.body.title || recipe.title;
    recipe.category = req.body.category || recipe.category;
    recipe.cookingTime = req.body.cookingTime || recipe.cookingTime;

    // Explicitly handle updating the ingredients array
    if (req.body.ingredients) {
      // Ensure it's always an array, even if only one is submitted
      recipe.ingredients = Array.isArray(req.body.ingredients) ? req.body.ingredients : [req.body.ingredients];
    } else {
      // If no ingredients are submitted, update to an empty array
      recipe.ingredients = [];
    }

    // Explicitly handle updating the steps array
    if (req.body.steps) {
      recipe.steps = Array.isArray(req.body.steps) ? req.body.steps : [req.body.steps];
    } else {
      recipe.steps = [];
    }

    // Handle image update if a new file is uploaded
    if (req.file) {
      // Construct the path to the old image to delete it
      const oldImagePath = path.join(__dirname, '..', recipe.imageUrl);

      // Check if the old image exists and delete it
      if (fs.existsSync(oldImagePath)) {
        fs.unlink(oldImagePath, (err) => {
          if (err) console.error('Error deleting old image:', err);
        });
      }

      // Set the new image URL
      recipe.imageUrl = req.file.path;
    }

    // Save the updated recipe to the database
    const updatedRecipe = await recipe.save();
    res.status(200).json(updatedRecipe);

  } catch (error) {
    console.error("Update Error:", error);
    res.status(500).json({ message: 'Server Error: ' + error.message });
  }
};
// @desc    Get all recipes
// @route   GET /api/recipes
// @access  Public
const getAllRecipes = async (req, res) => {
  try {
    const recipes = await Recipe.find({}).sort({ createdAt: -1 }); // Newest first
    res.status(200).json(recipes);
  } catch (error) {
    res.status(500).json({ message: 'Server Error: ' + error.message });
  }
};

// @desc    Get a single recipe by ID
// @route   GET /api/recipes/:id
// @access  Public
const getRecipeById = async (req, res) => {
  try {
    const recipe = await Recipe.findById(req.params.id);
    if (recipe) {
      res.status(200).json(recipe);
    } else {
      res.status(404).json({ message: 'Recipe not found.' });
    }
  } catch (error) {
    res.status(500).json({ message: 'Server Error: ' + error.message });
  }
};

module.exports = {
  createRecipe,
  getAllRecipes,
  getRecipeById,
  updateRecipe,
};